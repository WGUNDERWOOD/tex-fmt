#+title: tex-fmt
* Tasks
** TODO Check order of deleting multiple empty lines and trimming trailing space
* Release process
** Update release notes in NEWS.md
*** git log --oneline --no-merges vX.X.X..main
** Update version number in Cargo.toml
** Update version number for pre-commit in README
** Update Nix flake and lock
*** just nix
*** nix develop
** Update Rust version
*** just upgrade
** Run tests
*** just
*** just perf
*** Update performance results in README.md
** Push to GitHub and check action tests pass
** Create a git tag
*** git tag vY.Y.Y
*** git push --tags
*** Can delete remote tags with git push --delete origin vY.Y.Y
** Publish to crates.io with cargo publish
*** Pass --allow-dirty if notes.org has changed
** Publish GitHub release with notes from NEWS.md
*** No need to add a title
*** GitHub binaries published automatically with actions
** Publish in nixpkgs
*** Go to nixpkgs fork directory
*** git checkout master
*** git fetch upstream
*** git rebase upstream/master
*** git fetch
*** git push --force-with-lease origin master
*** git branch -d update-tex-fmt
*** git switch --create update-tex-fmt upstream/master
*** nvim pkgs/by-name/te/tex-fmt/package.nix
*** Update version and invalidate src.hash and cargoHash
*** nix-build -A tex-fmt
*** Fix both hashes, get a successful build
*** git add pkgs/by-name/te/tex-fmt/package.nix
*** git commit -m "tex-fmt: X.X.X -> Y.Y.Y"
*** git push --set-upstream origin HEAD
*** Go to GitHub and create a pull request
*** Submit pull request and check relevant boxes
** Tidy repository
*** Commit any new changes to NEWS.md or notes.org
* CLI and config structure
*** args.rs
**** Core argument definitions
**** Args struct defines arguments used internally by tex-fmt
**** OptionArgs struct defines an intermediate target
***** CLI arguments are read into OptionArgs in cli.rs
***** Config file arguments are read into OptionArgs in config.rs
***** Default values for OptionArgs are defined here
**** These OptionArgs are merged together
**** Then converted into Args
**** Conflicting arguments are resolved
**** The Display trait is implemented for args
*** command.rs
**** Contains the clap command definition
**** Sets options exposed to the user on the CLI
*** cli.rs
**** Logic for reading from CLI
**** Clap uses command.rs to read from CLI
**** This file then parses from clap into OptionArgs
*** config.rs
**** Logic for reading from config file
**** Determines the config file path by looking in several places
**** Reads from this path and parses to a toml Table
**** Values are then assigned to an OptionArgs struct
* Process for adding new arguments
** General
*** args.rs
**** Update Args struct if core argument
**** Update OptionArgs struct
**** Update Args resolve() if extra logic necessary
**** Update Args fmt::Display if core argument
** CLI arguments
*** command.rs
**** Update clap command definition
*** cli.rs
**** Update get_cli_args() and add extra logic if needed
** Config arguments
*** config.rs
**** Update get_config_args()
** Fix compiler warnings
** Implement behaviour
** Add tests
** Update README
*** CLI options
*** Config options
*** Usage section if commonly used option
